/*
 *************************************************
 *
 *	Unordered Double Linked Lists
 *
 *************************************************
 */

#include <stdio.h>
#include <stdlib.h>

#define NODE	struct node


/*
 * 	types
 */
struct node
{
	int	number;
	NODE	*prev;
	NODE	*next;
};

/*
 *	global variables
 */
NODE *head = NULL;
NODE *tail = NULL;



/*
 *************************************************
 *	insert before the node pointer by p
 *	assume the list is not empty and p is not NULL
 *************************************************
 */
void
insert (int number, NODE *p)	//pointer p is received as argument
{
	NODE	*temp;

	if ((temp = (NODE *) malloc (sizeof (NODE))) == NULL)
	{
		printf ("malloc error\n");
		exit (1);
	}

	temp->number = number;

	if (p == head)		// before the head
	{
		temp->next = head;
		temp->prev = NULL;
		head->prev = temp
		head = temp;
	}
	else			// in the middle
	{
		temp->next = p;
		temp->prev = p->prev;
		p->prev->next = temp;
		p->prev = temp;
	}

	return;
}


/*
 *************************************************
 *	delete the node pointed by p
 *	assume the list is not empty
 *************************************************
 */
int
delete (NODE *p)
{

	if (p == NULL)
		return (0);

	if (head == tail)
	{
		head = tail = NULL;
	}
	else if (p == head)
	{
		head = head->next;
		head->prev = NULL;
	}
	else if (p == tail)
	{
		tail = tail->prev;
		tail->next = NULL;	
	}
	else
	{
		p->prev->next = p->next;
		p->next->prev = p->prev;
	}

	free (p);
	return (1);
}


