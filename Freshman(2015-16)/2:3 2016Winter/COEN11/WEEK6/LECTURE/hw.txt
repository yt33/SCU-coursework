1. text file - name
void
read_numbers(char *name)
{
	FILE *fp;
	int number;
	fp=fopen(name,"r");
	if(fp==NULL)
		return;
	while(fscanf(fp,"%d",&number)==1)
		insert(number);
	fclose(fp);
	return;
}

2. writing number
void
save_numbers(char *name)
{
	FILE *fp;
	NODE *p;
	fp=fopen(name,"w");
	if(fp==NULL)
		return;
	p=head;
	while(p!=NULL)//traverse the list
	{
		fprintf(fp,"%d\n",p->number);//get inside the number
		p=p->next;
	}
	fclose(fp);
	return;
}

3.
int
count(FILE *p)//receiving the file pointer
{
	int counter=0;
	int number;//need a variable
/*the file is already open, don't need to open again*/
	while(fscanf(fp,"%d",&number)==1)
	{
		if(number>100)
			counter++;
	}//don't need to move pointer,the file is going to move for you
	return counter;
}

4.
int 
average(FILE *fp)
{
	int sum=0;
	int counter=0;
	int number;//need the 'number' so we can read the number into this 'number'
	while(fscanf(fp,"%d",&number)==1)
	{
		sum+=number;
		counter++;
	}
	return sum/counter;//need to know how many you are dividing by
}

5.
void
copy(FILE *src, FILE *dest)//receiving the source and destination pointers as argument
{
	char x[100];//need an array
	int ret;//keep track of how many i need to write
	while((ret=fread(x,sizeof(char),100,src)>0)
/*reading, and receiving how maany*/
		fwrite(x,sizeof(char),ret,dest);
	return;
}

6.
void
compare(FILE *fp1, FILE *fp2)//receiving the file pointers as argument
{
	char *r1,*r2;
	char x1[100];
	char x2[100];
	int line=1;
	while(1)
	{
		r1=fgets(x1,100,fp1);//fgets read line by line
		r2=fgets(x2,100,fp2);
		if(strcmp(x1,x2)!=0)//different
		{
			printf("different in line %d\n",line);
			break;
		}
		if(r1==NULL || r2==NULL)//when one of them is over, it's also different
			break;
		line++;
	}
	if(r1==NULL && r2==NULL)//same in the end
		printf("FIles are equal\n");
	else
	{
		if(r1==NULL && r2!=NULL || r1!=NULL && r2==NULL)
			printf("different in line %d\n",line);
	}
}


linked list
#define NODE struct node
struct node
{
	int number;
	NODE *next;
};

NODE *head=NULL;

void
insert(int number)//receiving the number as argument
{
	NODE *temp;
	temp=(NODE *)malloc(sizeof(NODE));
	if(temp==NULL)//if there's nothing inside the temp
		return;
	temp->number=number;//storing the number into the node
	if(head==NULL)//the list is empty
	{
		head=temp;
		head->next=head;
	}
	else
	{
		temp->next=head->next;
		head->next=temp;
	}
	return;
}

print the list only once
void
print(void)
{
	NODE *p;
	if(head==NULL)//the list is empt
		return;
	p=head;
	do
	{
		printf("%d\n",p->number);
		p=p->next;//print, then move
	}
	while(p!=head);//if p==head, done
	return;
}