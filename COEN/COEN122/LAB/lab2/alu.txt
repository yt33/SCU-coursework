module alu(A, B, op, C, Z, NEG);

input [31:0] A;
input [31:0] B;
input [3:0] op;
output reg [31:0] C;
output reg Z;
output reg NEG;

always @(A, B, op)
begin
    
    if(op == 4'b0000)       // add (A + B)
        C = A + B; 
        
    else if(op == 4'b0001)  // increment (B + 1)
        C = B + 1;
        
    else if(op == 4'b0010)  // negate (0 + -A)
        C = ~A + 1;         //  flip all bits in A and add 1 to it so it can be the negative of A
    
    else if(op == 4'b0011)  // subtract ( B + -A)
        C = B + ~A + 1;     // make sure we are using the 2's compliment of A instead of the negation
    
    else if(op == 4'b0100)     // pass A (A + 0)
        C = A;
    
    if(C[31] == 1)
        NEG = 1;
    else
        NEG = 0;
        
    if(C == 0)
        Z = 1;
    else
        Z = 0;

end

endmodule